"""
Train a fake news classifier (TF-IDF + LinearSVC with calibrated probs).
"""
from __future__ import annotations
import argparse, os, joblib
from sklearn.pipeline import Pipeline
from sklearn.svm import LinearSVC
from sklearn.calibration import CalibratedClassifierCV
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, roc_auc_score
from data import load_dataset
from preprocess import Cleaner, make_vectorizer

def build_pipeline() -> Pipeline:
    base = LinearSVC()
    clf = CalibratedClassifierCV(base_estimator=base, method="sigmoid", cv=5)
    pipe = Pipeline([
        ("clean", Cleaner()),
        ("tfidf", make_vectorizer()),
        ("clf", clf),
    ])
    return pipe

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--data", required=True, help="Path to CSV with text, label")
    ap.add_argument("--text_col", default="text")
    ap.add_argument("--label_col", default="label")
    ap.add_argument("--model_dir", default="models")
    ap.add_argument("--test_size", type=float, default=0.2)
    ap.add_argument("--random_state", type=int, default=42)
    args = ap.parse_args()

    os.makedirs(args.model_dir, exist_ok=True)
    df = load_dataset(args.data, args.text_col, args.label_col)
    X_train, X_test, y_train, y_test = train_test_split(
        df["text"].tolist(), df["label"].values, test_size=args.test_size, random_state=args.random_state, stratify=df["label"].values
    )

    pipeline = build_pipeline()
    pipeline.fit(X_train, y_train)

    # Evaluate
    probs = pipeline.predict_proba(X_test)[:,1]
    preds = (probs >= 0.5).astype(int)
    print(classification_report(y_test, preds, target_names=["real","fake"]))
    try:
        auc = roc_auc_score(y_test, probs)
        print(f"ROC-AUC: {auc:.4f}")
    except Exception:
        pass

    # Save
    model_path = os.path.join(args.model_dir, "model.joblib")
    joblib.dump(pipeline, model_path)
    print(f"Saved model to {model_path}")

if __name__ == "__main__":
    main()
